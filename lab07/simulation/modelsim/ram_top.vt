// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/29/2018 08:11:08"
                                                                                
// Verilog Test Bench template for design : ram_top
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module ram_top_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg clk;
reg [7:0] din;
reg [3:0] inaddr;
reg we;
// wires                                               
wire [7:0]  dout1;
wire [7:0]  dout2;
wire [6:0]  num1;
wire [6:0]  num2;
wire [6:0]  num3;
wire [6:0]  num4;

// assign statements (if any)                          
ram_top i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.din(din),
	.dout1(dout1),
	.dout2(dout2),
	.inaddr(inaddr),
	.num1(num1),
	.num2(num2),
	.num3(num3),
	.num4(num4),
	.we(we)
);
initial
begin
clk=0;
we=0;
inaddr=1;
din=8'b00000000;
end
//initial  
always                                              
begin                                                  
// code that executes only once                        
// insert code here --> begin     
		clk=0;#10;
      we=0;#10;
	inaddr=1;#10;
	inaddr=2;#10;
	inaddr=3;#10; 
	inaddr=4;#10;
	inaddr=5;#10;
	inaddr=6;#10;
	inaddr=7;#10; 
	inaddr=8;#10;
	we=1;#10;
	din=8'b11111111;#10;
	we=0;#10
	$stop;
// --> end                                             
//$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
     #5;clk=~clk;                                                  
//@eachvec;                                              
// --> end                                             
end                                                    
endmodule

