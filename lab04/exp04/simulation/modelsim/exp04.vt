// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/08/2018 09:02:36"
                                                                                
// Verilog Test Bench template for design : exp04
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 10 ns/ 1 ps
module exp04_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg clk;
reg d;
reg reset;
// wires                                               
wire a;
wire c;

// assign statements (if any)                          
exp04 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.c(c),
	.clk(clk),
	.d(d),
	.reset(reset)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                         
clk = 0;  d=0; #7;
d=0; #7;
 d=1;#7;
 d=0;#7;
 d=1;#7;
d=0; #7;
 d=1;#7;
 d=0;#7;
 d=1;#7;
reset=0;
d=0; #7;
 d=1;#7;
 d=0;#7;
 d=1;#7;
 $stop;
                                               
// --> end                                             
//$display("Running testbench");                       
end    

always
begin
#5 clk = ~clk;
end
                                                                                                
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                                                                 
// code executes for every event on sensitivity list   
// insert code here --> begin                                                                          
//@eachvec;                                              
// --> end                                                                                               
endmodule

