// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/05/2018 09:42:16"
                                                                                
// Verilog Test Bench template for design : keyboard_lab
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 
`timescale 1ns / 1ps
 module keyboad_lab_vlg_tst;

 /* parameter */
 parameter [31:0] clock_period = 10;

 /* ps2_keyboard interface signals */
 reg clk,clrn;
 wire [7:0] data;
 wire ready,overflow;
 wire kbd_clk, kbd_data;
 reg nextdata_n;

 ps2_keyboard_model model(
 .ps2_clk(kbd_clk),
 .ps2_data(kbd_data)
 );

 ps2_keyboard inst(
 .clk(clk),
 .clrn(clrn),
 .ps2_clk(kbd_clk),
 .ps2_data(kbd_data),
 .data(data),
 .ready(ready),
 .nextdata_n(nextdata_n),
 .overflow(overflow)
 );

 initial begin /* clock driver */
 clk = 0;
 forever
 #(clock_period/2) clk = ~clk;
 end

 initial begin
 clrn = 1'b0; #20;
 clrn = 1'b1; #20;
 model.kbd_sendcode(8'h1C); // press 'A'
 #20 nextdata_n =1'b0; #20 nextdata_n =1'b1;//read data
 model.kbd_sendcode(8'hF0); // break code
 #20 nextdata_n =1'b0; #20 nextdata_n =1'b1; //read data
 model.kbd_sendcode(8'h1C); // release 'A'
 #20 nextdata_n =1'b0; #20 nextdata_n =1'b1; //read data
 model.kbd_sendcode(8'h1B); // press 'S'
#20 model.kbd_sendcode(8'h1B); // keep pressing 'S'
 #20 model.kbd_sendcode(8'h1B); // keep pressing 'S'
 model.kbd_sendcode(8'hF0); // break code
model.kbd_sendcode(8'h1B); // release 'S'
 #20;
 $stop;
 end
 endmodule

